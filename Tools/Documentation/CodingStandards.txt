-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- NOTE: Stolen from AAU GAP Program
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Coding Standards & Practices for GAP

Last Updated: 2/17/2020


Motivation

To provide a set of standards for how code is written within the GAP program.  As a professional software engineer, you will need to conform to the standards set forth by the company you work with.  These standards are based on common professional practices.

Note that any of these conventions may be changed for any given class.  For example, if you’re working in Unreal 4, your instructor may require you to follow their naming conventions.  You will be told on the first day of class if this is the case.

A note on versioning: We are using C++ 17.  All features of C++ 11, 14, and 17 are fair game and, in many cases, are required.


Naming Conventions

Classes, namespaces, functions, typedef’s, aliases, and enum names should be named using CamelCase, where the first letter is capitalized:

class FooBar;
namespace FooBar { }
enum class FooBar { };
typedef std::vector<int> IntVector;
using FloatVector = std::vector<float>;
void DoTheThing();

Filenames should be named in the same way:

FooBar.h
FooBar.cpp

Variables should be named in camel case, but with the first letter lowercase:

int fooBar;

Member variables, global variables, and static variables must have a single letter prefix with an underscore denoting their scope.  Local variables (including local static variables) have no prefix.

int m_fooBar;  // member variable
int g_fooBar;  // global variable
static int s_fooBar;  // static variable (non-local)
int fooBar;  // local variable
static int fooBar;  // local static variable

Additionally, pointers should be prefixed with a ‘p’:

int* m_pFooBar;  // member pointer variable
int* g_pFooBar;  // global pointer variable
int* s_pFooBar;  // static pointer variable (class or non-class)
int* pFooBar;  // local pointer variable

Constant variables that are essentially used as tuning variables (including all constexpr variables) should be prefixed with a k.  This includes enum values as well:

const char* kpFooBar = “baz”;
enum class FooBar
{
    kFooBar,
    kFooBarBaz
};

constexpr unsigned int kFoo = 0;

This overrides the scoping prefixes.  So, for example, a member constant is named as such:

class Foo
{
    static constexpr int kSomeConst = 100;
};

The exception to using k is if you have a variable that looks like any other variable but it just happens to not change.  For example:

void Square(int val)
{
    const int result = val * val;  // Treated like any other variable,
                                   // it just happens to not change.
    return result;
}

There are two general placement styles of const: west const and east const.  We use west const.

const int foo = 10;  // west const
int const foo = 10;  // east const 

#define’s should be all caps, with underscores between each word:

#define FOO_BAR


Bracing & Formatting

Bracing & indentation should adhere to the Allman style:
https://en.wikipedia.org/wiki/Indent_style#Allman_style

while (x == y)
{
    Foo();
    FooBar();
}

if (x > y)
{
    Foo();
}
else
{
    FooBar();
}

FooBarBaz();

Indentation should be set to 4 spaces.  Make sure you are inserting spaces rather than inserting the tab character.  In Visual Studio, you can set this by going to Tools -> Options -> Text Editor -> C/C++ -> Tabs.  Change the Tab size to 4 and make sure “Insert spaces” is set.

Binary operators should always be surrounded by a single space on either end, while unary operators should not have any spaces:

int foo = bar + baz;
++foo;

Never use single-line if statements or loops:

if (foo) FooBar();  // NO

while (foo) FooBar();  // NO

Instead, put it on the next line:

if (foo)
    FooBar();

while (foo)
    FooBar();

Multiple statements on the same line are also not allowed:

x = 10; y = 15;  // NO

Single-line functions are allowed only if they are trivial accessors or mutators:

class Foo
{
    int m_bar;

public:
    int GetBar() const { return m_bar; }
    void SetBar(int bar) { m_bar = bar; }

    // NO.  This function has two statements, so it can’t be 
    // a single line.  It’s also no longer a trivial getter 
    // since it has additional side effects.
    int IncrementAndGetBar() { ++m_bar; return m_bar; }
};

It’s okay to omit the braces on an if statement or loop if there can be absolutely no confusion that it’s the only statement within the body, as is the case above.  You should avoid single-line bodies that take up multiple lines:
// avoid this -- use braces instead
if (foo)
    while (bar)
        if (baz)
            DoTheThing();

When in doubt, use braces.  It is always okay to use braces, even if the body is trivial:

// OK
if (foo)
{
    ++bar;
}

Switch statements have the following form:

switch (foo)
{
    case 1:
        Bar();
        break;

    case 2:
        Baz();
        break;

    default:
        Error(“Default reached”);
        return false;
}

Alternatively, you may add braces to the case statements so that each case contains a local scope.  You must either have braces around all of the cases or none of the cases.  You may not mix braced and unbraced cases.

switch (foo)
{
    case 1:
    {
        Bar();
        break;
    }

    case 2:
    {
        Baz();
        break;
    }

    default:
    {
        Error(“Default reached”);
        return false;
    }
}

Either of the above forms are fine, but keep in mind that not including braces in a case statement can cause subtle errors because they will all share the same scope.

It is also permissible to have single-line case statements as long as they are only a single simple line, plus either a break or return statement:

switch (foo)
{
    case 1: Bar(); break;
    case 2: Baz(); break;
    default: Error(“Default reached”); return false;  // return OK
}

One final note is to avoid magic numbers or literals as case tests.  Prefer constexpr variables instead.


Classes

Classes should generally be structured as follows:

class FooBar
{
public:
    // Nested classes, enums, and typedefs go here.  These might 
    // be private or protected instead of public.

private:
    // private data goes here

protected:
    // protected data goes here

public:
    // public functions goes here
    // simple accessors & mutators go here

protected:
    // protected member functions go here

private:
    // private member functions go here
};

This is more of a guideline than a strict rule.  Do whatever makes the class readable.

Avoid public data in classes.  In other words, you should never have a public member variable.  Use accessors and mutators to manipulate variables from outside of the object.  The exception is for structs or certain “primitive” mathematical types (Vector3 for instance).

Prefer initializing member variables in the constructor’s initializer list.  It should be formatted like this:

Foo::Foo()
    : m_bar(0)
    , m_baz(0)
{
    //
}

This allows you to easily comment out a single line in the initializer list.

In-class initialization is not allowed:

class Foo
{
    int m_bar = 0;  // NO
};

The exception is for const static ints that are used to set a member array size:

class Foo
{
    static const int s_kBarArraySize = 100;  // OK
    int mBar[s_kBarArraySize];
};

As a rule of thumb, if you create a custom destructor, copy constructor, copy assignment operator, move constructor, or move assignment operator, you should implement all six of the magic functions C++ might define for you.  In this case, if you want the default behavior, you should explicitly force it.

class Foo
{
public:
    Foo();
    ~Foo();  // destructor defined, so we need to define the others
    Foo(const Foo&) = default;
    Foo& operator=(const Foo&) = default;
    Foo(Foo&& right);
    Foo& operator=(Foo&& right);
};


The use of override and final are required where appropriate:

class Foo
{
public:
    virtual void DoTheThing() = 0;
    virtual void DoSomethingElse() = 0;
};

class Bar : public Foo
{
public:
    virtual void DoTheThing() override;
    virtual void DoSomethingElse() override final;
};

In particular, use final where you can because it can improve performance in some situations.

C++’s auto-generated functions should be defined as appropriate.  Proper definition of move constructors and move assignment operators should follow the same guidelines as defining copy constructors and copy assignment operators.  The delete and default modifiers should be used as appropriate.

For example, a class where copying isn’t appropriate but moving is fine might be defined as follows:

class Foo
{
    int* m_pBar;

public:
    Foo();  // default constructor

    // delete copy constructor and copy assignment operator
    Foo(const Foo& right) = delete;
    Foo& operator=(const Foo& right) = delete;

    // define move constructor and move assignment operator
    Foo(Foo&& right);
    Foo& operator=(Foo&& right);
};

The above is just an example for illustrative purposes.  In a real program, you would just use the default implementations of each because they will do the right 

Prefer C++’s new cross-platform libraries over the platform-specific ones.  For example, use std::thread instead of Windows’ threading API or pthreads.  Use std::chrono instead of GetTickCount().  Use std::filesystem instead of OS-specific functions.

Function Objects & Lambdas

Lambdas may be used in any context that makes sense, as long as they don’t make the code harder to decipher.  If you are storing a lambda somewhere (or any callable object), it should be named like a variable:

// lambda
auto lambda = []() { cout << "foo" << endl; };

// functor
struct Functor  // definition is named like a class
{
    void operator()() { cout << “foo” << endl; }
};
Functor functor;  // instantiation named like a variable

// C function pointer, named like a pointer variable
void (*pFoo)() = &Foo;

For lambdas, captures are okay, but do not use default captures of any kind:

auto foo = [&x, y]() { cout << "foo" << endl; };  // YES
auto bar = [&]() { cout << "foo" << endl; };  // NO
auto baz = [=]() { cout << "foo" << endl; };  // NO


Enums

Scoped enums are generally preferred to non-scoped enums:

// scoped enum
enum class Foo
{
    kBar,
    kBaz,
};

// non-scoped enum
enum Foo
{
    kBar,
    kBaz,
};


Commenting

You should add comments in the follow circumstances:
At the top of a function.
This comment should explain the purpose of the function.
It should describe the inputs, outputs, and any assumptions.
At the top of a class.
Describe the purpose of the class and how it should be used.
Explain the main public interface.
It’s not necessary to explain simple accessors or mutators.
For each block of code.
There should be a short comment at the top of each block of code describing what that section does.
For anything that’s not extremely obvious.
If you’re doing something tricky, write a big comment explaining it.
If you had trouble figuring something out, write out your solution.
If there’s a bit of confusing code, write a comment that explains it.
For any bug fixes or optimizations that weren’t obvious.
If you changed something that seems like it should have worked, write a comment explaining what you changed and why.


Headers

For header guards, there is a choice between this:

#pragma once

and this:

#ifndef FOO_BAR_H
#define FOO_BAR_H

…

#endif  // FOO_BAR_H

Use the first method.  All modern compilers support this method and it is faster to compile in Visual Studio.

Header files should be self-contained.  They should have header guards and include all the other headers necessary to compile them.  In general, try to avoid adding #include’s inside header files where possible.  Use forward declarations when you can..


main()

There are two forms of main() that are valid in standard C/C++:

// Form 1: No arguments, returns an int
int main()
{
    return 0;  // this indicates normal program termination
}

// Form 2: command-line arguments, returns an int
int main(int argc, char* args[])
{
    return 0;  // this indicates normal program termination
}

Either of these forms are valid.  There is a third form you will see sometimes that has no return value:

// Form 3: No return.  This is forbidden.
void main()  // NO
{
    //
}

This will compile just fine in Visual Studio, but it is NOT considered valid C++.  Because of this, it is forbidden.  You must use Form 1 or Form 2.


Misc

Avoid the postfix increment and decrement operators.  Always use the prefix version unless there’s a real reason not too (though there almost never is).  The reason is that postfix increment/decrement will create a temp variable.  This is almost always optimized out for primitives, but for first-class objects (like STL iterators) it can create a performance concern.

// yes
++foo;
--bar;

// no
foo++;
bar--;

Use parentheses whenever there’s any confusion over the order of operations.  Don’t rely on other programmers memorizing the operator precedence tables.  For example:

// NO
if (foo && bar || baz)
    DoTheThing();

// YES
if (foo && (bar || baz))
    DoTheThing();

Always use nullptr instead of NULL.

Prefer using std::byte instead of unsigned char* for raw data.

Prefer constexpr over const whenever you can.

Prefer aliases over typedefs.

Range-based for loops are encouraged but never required:

std::vector<GameObject*> gameObjects;  // assume this is filled out
for (GameObject* pGameObject : gameObjects)
{
    pGameObject->Update();
}

Structured bindings should be used to improve readability for things like tuples, pairs, and map iterators:

std::map<Id, GameObject*> gameObjects;  // assume this is filled out
for (const auto&[id, pGameObject] : gameObjects)
{
    pGameObject->Update();
}

using WeaponData = std::tuple<int, float, int, int>;
WeaponData GetWeaponData();
auto[damage, quality, attackBonus, parryBonus] = GetWeaponData();

The auto keyword may be used anytime that it doesn’t obfuscate the meaning.  A common example is when assigning iterators, but other uses are permitted as well:

auto it = gameObjects.begin();

C++ exceptions should not be used for any reason.


C++ 17 / 20

C++ 17 is fully supported by all major compilers (MSVC, clang, and gcc).  As such, it is the language we are using.  All C++ 17 features are fair game and it is encouraged that you make full use of it.  Note that as of this writing, Visual Studio still defaults to C++ 14 so you will need to manually change the language to support C++ 17 if you want to use any of those features.

C++ 20 has been accepted into the standard as of 2/15/2020 and is expected to be published in May of 2020.  Visual Studio supports some C++ 20 features, but not all.  You are encouraged to play with C++ 20, but it is not allowed on any assignments or in any code you submit.


C#

Properties should be named like a local variable, except that a prefix is not necessary.  If it is an accessor, it should share the same name as the variable it’s tied to.  Note that all the rules for single-line functions apply to properties.  Example:

public class Foo
{
    private int m_bar = 0;

    public int bar
    {
        // This is a single-statement getter, so it’s okay to be 
        // one line:
        get { return m_bar; }

        // Not a single-statement setter, so it must be multiple
        // lines:
        set
        {
            if (value >= 0 && value < 100)
                m_bar = value;
        }
    }
}

All functions and variables must have an explicit access modifier rather than relying on the default of everything being private:

private int m_foo = 0;  // YES
int m_foo = 0;  // NO

private void DoThing()  // YES
{
    //
}

void DoThing()  // NO
{
    //
}

Lua

Tables that are being used as classes should be named like classes.

Lua has no concept of public or private, but those concepts are still important.  Variables and functions that are prefixed with a leading underscore are considered private and should be treated as such:

function Foo:_Bar()
    --
end

Since Lua requires the self keyword to access member functions and variables, it is not necessary to use the ‘m_’ prefix.  Likewise, there are no static variables.  Global variables should still be marked with a ‘g_’ prefix.
